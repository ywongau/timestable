{"version":3,"sources":["serviceWorker.js","db.js","App.jsx","engine.js","index.js"],"names":["Boolean","window","location","hostname","match","engine","db","promisify","request","Promise","resolve","reject","onsuccess","event","target","result","onerror","closeDb","close","range","from","to","Array","keys","map","n","getAllQuestions","x","y","speak","text","u","SpeechSynthesisUtterance","voice","speechSynthesis","getVoices","idb","open","name","onupgradeneeded","createObjectStore","keyPath","autoIncrement","addRecord","then","transaction","objectStore","put","getRecords","getAll","deleteRecords","deleteDatabase","Db","indexedDB","App","random","getScore","all","top5","filter","r","sort","a","b","id","slice","length","every","correct","records","xs","avgSeconds","secondsSpent","reduce","acc","getTimedScore","shuffle","shuffled","forEach","i","j","Math","floor","getQuestion","questionsWithScore","flat","isNaN","unanswerQuestions","min","max","bias","influence","rnd","mix","biasRandom","Engine","useState","setQuestion","NaN","answer","setAnswer","inputValue","setInputValue","Date","startTime","setStartTime","freezed","setFreezed","setRecords","setFilter","inputRef","useRef","onFilterChange","e","latestFilter","parseInt","value","useEffect","question","current","focus","newQuestion","data-testid","style","visibility","onSubmit","preventDefault","Number","ts","valueOf","record","latestRecords","setTimeout","ref","readOnly","type","onChange","checked","pairs","key","className","onClick","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6da2a07d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const promisify = request => new Promise((resolve, reject) => {\r\n    request.onsuccess = function (event) {\r\n        resolve(event.target.result);\r\n    };\r\n    request.onerror = reject\r\n});\r\n\r\nconst closeDb = db => result => {\r\n    db.close();\r\n    return result;\r\n};\r\n\r\nexport default idb => {\r\n    const open = (name) => {\r\n        const request = idb.open(name);\r\n        request.onupgradeneeded = () => {\r\n            request.result.createObjectStore('records', { keyPath: 'id', autoIncrement: true });\r\n        }\r\n        return promisify(request);\r\n    };\r\n    const put = x => db => promisify(db.transaction('records', 'readwrite')\r\n        .objectStore('records').put(x)).then(closeDb(db));\r\n\r\n    const addRecord = x => open('records')\r\n        .then(put(x));\r\n\r\n    const getRecords = () => open('records')\r\n        .then(db => promisify(\r\n            db.transaction('records').objectStore('records').getAll())\r\n            .then(closeDb(db)));\r\n\r\n    const deleteRecords = () => promisify(idb.deleteDatabase('records'));\r\n\r\n    return {\r\n        addRecord,\r\n        getRecords,\r\n        deleteRecords\r\n    }\r\n}","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\n\nexport default (engine, db) => () => {\n  const [[x, y], setQuestion] = useState([0, 0]);\n  const [answer, setAnswer] = useState(NaN);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [startTime, setStartTime] = useState(new Date());\n  const [freezed, setFreezed] = useState(false);\n  const [records, setRecords] = useState([]);\n  const [filter, setFilter] = useState(NaN);\n  const inputRef = useRef(null);\n\n  const onAnswerChange = e => {\n    setInputValue(e.target.value);\n  };\n  const onSubmit = e => {\n    if (inputValue === \"\" || freezed) {\n      e.preventDefault();\n      return;\n    }\n    const answer = Number(inputValue);\n    setAnswer(answer);\n    const secondsSpent = parseInt((new Date() - startTime) / 1000);\n    const correct = answer === x * y;\n    const ts = new Date().valueOf();\n    const record = {\n      correct,\n      x,\n      y,\n      secondsSpent,\n      ts\n    };\n    engine.speak(correct ? \"correct\" : `${x} times ${y} equals ${x * y}`);\n    db.addRecord(record)\n      .then(() => db.getRecords())\n      .then(latestRecords => {\n        setRecords(latestRecords);\n        setTimeout(\n          () => {\n            setQuestion(engine.getQuestion(latestRecords, filter) || [0, 0]);\n            setAnswer(NaN);\n            setInputValue(\"\");\n            setStartTime(new Date());\n            setFreezed(false);\n          },\n          correct ? 500 : 5000\n        );\n      });\n    setFreezed(true);\n    e.preventDefault();\n  };\n  const deleteHistory = () =>\n    db.deleteRecords().then(() => {\n      setRecords([]);\n      setQuestion(engine.getQuestion([], filter) || [0, 0]);\n    });\n\n  const onFilterChange = e => {\n    const latestFilter = parseInt(e.target.value);\n    setFilter(latestFilter);\n    setQuestion(engine.getQuestion(records, latestFilter) || [0, 0]);\n  };\n\n  const newQuestion = records => {\n    const question = engine.getQuestion(records, filter);\n    setQuestion(question || [0, 0]);\n    inputRef.current.focus();\n  };\n\n  useEffect(() => {\n    db.getRecords().then(records => {\n      setRecords(records);\n      newQuestion(records);\n    });\n  }, []);\n\n  return (\n    <>\n      <form\n        data-testid=\"question\"\n        style={{ visibility: x === 0 ? \"hidden\" : \"visible\" }}\n        id=\"question\"\n        onSubmit={onSubmit}\n      >\n        {`${x}×${y}=`}\n        <input\n          ref={inputRef}\n          readOnly={freezed}\n          min=\"1\"\n          max=\"99\"\n          type=\"number\"\n          onChange={onAnswerChange}\n          value={inputValue}\n        />\n        {isNaN(answer) ? null : (\n          <span data-testid=\"result\">{x * y === answer ? \"✔️\" : \"❌\"}</span>\n        )}\n        <div\n          id=\"correct-answer\"\n          style={{ visibility: freezed ? \"visible\" : \"hidden\" }}\n        >\n          Correct answer is {x * y}\n        </div>\n      </form>\n      <div id=\"records\">\n        <div>\n          <label>\n            <input\n              type=\"radio\"\n              checked={isNaN(filter)}\n              name=\"focus\"\n              onChange={onFilterChange}\n              value=\"\"\n            />\n            <span>all</span>\n          </label>\n        </div>\n        {engine.getAllQuestions().map((pairs, i) => (\n          <div key={i}>\n            <label>\n              <input\n                type=\"radio\"\n                checked={filter === pairs[0][0]}\n                name=\"focus\"\n                onChange={onFilterChange}\n                value={pairs[0][0]}\n              />\n              <span>{pairs[0][0]}×? </span>\n            </label>\n            {pairs.map(([x, y]) => (\n              <span className=\"wrapper\">\n                <span\n                  key={x + \"-\" + y}\n                  className={`priority-${engine.getScore(x, y, records)} ${\n                    isNaN(filter) || x === filter || y === filter\n                      ? \"\"\n                      : \"disabled\"\n                  }`}\n                >\n                  {x + \"×\" + y}\n                </span>\n              </span>\n            ))}\n          </div>\n        ))}\n      </div>\n      <button onClick={deleteHistory}>Delete records</button>\n    </>\n  );\n};\n","const from = 2;\r\nconst to = 9;\r\nconst range = (from, to) => [...Array(to - from + 1).keys()].map(n => from + n);\r\nconst getAllQuestions = () =>\r\n  range(from, to).map(x => range(from, x).map(y => [x, y]));\r\nconst avg = xs => xs.reduce((acc, x) => acc + x, 0) / xs.length;\r\nconst speak = text => {\r\n  const u = new SpeechSynthesisUtterance(text);\r\n  u.voice = speechSynthesis.getVoices()[0];\r\n  speechSynthesis.speak(u);\r\n};\r\nexport default random => {\r\n  const shuffle = xs => {\r\n    const shuffled = xs.slice();\r\n    range(0, xs.length - 1).forEach(i => {\r\n      const j = Math.floor(random() * (i + 1));\r\n      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n    });\r\n    return shuffled;\r\n  };\r\n  const biasRandom = (min, max, bias, influence) => {\r\n    const rnd = random() * (max - min) + min;\r\n    const mix = random() * influence;\r\n    return rnd * (1 - mix) + bias * mix;\r\n  };\r\n  const getQuestion = (records, filter) => {\r\n    const questionsWithScore = getAllQuestions()\r\n      .flat()\r\n      .map(([x, y]) => [x, y, getScore(x, y, records)])\r\n      .filter(\r\n        x => x[2] < 6 && (isNaN(filter) || x[0] === filter || x[1] === filter)\r\n      );\r\n    const questionsGroupedByScore = questionsWithScore.reduce(\r\n      (acc, x) => {\r\n        acc[x[2]] = [...acc[x[2]], [x[0], x[1]]];\r\n        return acc;\r\n      },\r\n      [[], [], [], [], [], [], []]\r\n    );\r\n    const unanswerQuestions = questionsGroupedByScore[0];\r\n    if (unanswerQuestions.length > 0) {\r\n      return unanswerQuestions[Math.floor(random() * unanswerQuestions.length)];\r\n    }\r\n    return questionsWithScore.sort((a, b) => a[2] - b[2])[\r\n      Math.floor(biasRandom(0, questionsWithScore.length, 0, 1))\r\n    ];\r\n  };\r\n  const getTimedScore = records => {\r\n    const avgSeconds = avg(records.map(x => x.secondsSpent));\r\n    if (avgSeconds > 20) return 3;\r\n    if (avgSeconds > 10) return 4;\r\n    if (avgSeconds > 5) return 5;\r\n    return 6;\r\n  };\r\n  const getScore = (x, y, all) => {\r\n    const top5 = all\r\n      .filter(r => r.x === x && r.y === y)\r\n      .sort((a, b) => b.id - a.id)\r\n      .slice(0, 5);\r\n    if (top5.length === 0) return 0;\r\n    if (top5.every(r => !r.correct)) return 1;\r\n    if (!top5.every(r => r.correct)) return 2;\r\n    if (top5.every(r => r.correct)) return getTimedScore(top5);\r\n  };\r\n  return {\r\n    range,\r\n    shuffle,\r\n    getAllQuestions,\r\n    getQuestion,\r\n    getScore,\r\n    speak\r\n  };\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppFactory from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Db from './db';\nimport Engine from './engine';\nconst fakeEngine = {\n    getQuestion: () => [3, 2]\n};\nconst db = Db(indexedDB);\nconst App = AppFactory(Engine(Math.random), db);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}