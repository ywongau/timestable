{"version":3,"sources":["Question.jsx","TimesTable.jsx","serviceWorker.js","db.js","App.jsx","engine.js","index.js"],"names":["question","x","y","rnd","onSubmit","useState","NaN","answer","setAnswer","inputValue","setInputValue","inputRef","useRef","Date","startTime","setStartTime","readonly","setReadonly","useEffect","current","focus","data-testid","id","e","preventDefault","submittedAnswer","Number","correct","secondsSpent","parseInt","maxLength","ref","type","pattern","onChange","target","value","readOnly","isNaN","style","visibility","onFilterChange","questionsWithScore","filter","setFilter","onFilterInputChange","updatedFilter","checked","name","map","triples","i","key","z","className","join","Boolean","window","location","hostname","match","engine","db","promisify","request","Promise","resolve","reject","onsuccess","event","result","onerror","closeDb","close","range","from","to","Array","keys","n","getAllQuestions","speak","text","u","SpeechSynthesisUtterance","voice","speechSynthesis","getVoices","idb","open","onupgradeneeded","createObjectStore","keyPath","autoIncrement","addRecord","then","transaction","objectStore","put","getRecords","getAll","deleteRecords","deleteDatabase","Db","indexedDB","App","random","getScore","all","top5","r","sort","a","b","slice","length","every","records","xs","avgSeconds","reduce","acc","getTimedScore","getQuestion","allQuestions","flat","questions","notMasteredQuestions","Math","floor","unanswerQuestions","console","warn","min","max","bias","influence","mix","biasRandom","Engine","setQuestion","setRecords","Question","ts","valueOf","record","latestRecords","setTimeout","TimesTable","onClick","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf627c81.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\n\r\nexport default ({ question: [x, y, rnd], onSubmit }) => {\r\n  const [answer, setAnswer] = useState(NaN);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n  const [startTime, setStartTime] = useState(new Date());\r\n  const [readonly, setReadonly] = useState(false);\r\n  const onFormSubmit = e => {\r\n    e.preventDefault();\r\n    if (inputValue === \"\") return;\r\n    const submittedAnswer = Number(inputValue);\r\n    setAnswer(submittedAnswer);\r\n    onSubmit({\r\n      correct: submittedAnswer === x * y,\r\n      secondsSpent: parseInt((new Date() - startTime) / 1000)\r\n    });\r\n    setReadonly(true);\r\n  };\r\n  const onAnswerChange = e => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setAnswer(NaN);\r\n    setInputValue(\"\");\r\n    setReadonly(false);\r\n    setStartTime(new Date());\r\n    inputRef.current.focus();\r\n  }, [x, y, rnd]);\r\n\r\n  return (\r\n    <form data-testid=\"question-form\" id=\"question\" onSubmit={onFormSubmit}>\r\n      <span>\r\n        {x}×{y}=\r\n      </span>\r\n      <input\r\n        maxLength=\"2\"\r\n        ref={inputRef}\r\n        type=\"text\"\r\n        pattern=\"^\\d\\d?$\"\r\n        onChange={onAnswerChange}\r\n        value={inputValue}\r\n        readOnly={readonly}\r\n      />\r\n      {isNaN(answer) ? null : (\r\n        <span data-testid=\"result\">{x * y === answer ? \"✔️\" : \"❌\"}</span>\r\n      )}\r\n      <p\r\n        style={{\r\n          visibility: x * y === answer || isNaN(answer) ? \"hidden\" : \"visible\"\r\n        }}\r\n      >\r\n        Correct answer is {x * y}\r\n      </p>\r\n    </form>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default ({ onFilterChange, questionsWithScore }) => {\r\n  const [filter, setFilter] = useState(NaN);\r\n  const onFilterInputChange = e => {\r\n    const updatedFilter = parseInt(e.target.value);\r\n    setFilter(updatedFilter);\r\n    onFilterChange({ filter: updatedFilter });\r\n  };\r\n  return (\r\n    <div id=\"records\">\r\n      <div>\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            checked={isNaN(filter)}\r\n            name=\"filter\"\r\n            onChange={onFilterInputChange}\r\n            value=\"\"\r\n          />\r\n          <span>all</span>\r\n        </label>\r\n      </div>\r\n      {questionsWithScore.map((triples, i) => (\r\n        <div key={i}>\r\n          <label>\r\n            <input\r\n              type=\"radio\"\r\n              checked={filter === triples[0][0]}\r\n              name=\"filter\"\r\n              onChange={onFilterInputChange}\r\n              value={triples[0][0]}\r\n            />\r\n            <span>{triples[0][0]}×?</span>\r\n          </label>\r\n          {triples.map(([x, y, z]) => (\r\n            <span className=\"wrapper\" key={x + \"-\" + y}>\r\n              <span\r\n                key={x + \"-\" + y}\r\n                className={[\r\n                  `priority-${z}`,\r\n                  ...(isNaN(filter) || x === filter || y === filter\r\n                    ? []\r\n                    : [\"disabled\"])\r\n                ].join(\" \")}\r\n              >\r\n                {x + \"×\" + y}\r\n              </span>\r\n            </span>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const promisify = request => new Promise((resolve, reject) => {\r\n    request.onsuccess = function (event) {\r\n        resolve(event.target.result);\r\n    };\r\n    request.onerror = reject\r\n});\r\n\r\nconst closeDb = db => result => {\r\n    db.close();\r\n    return result;\r\n};\r\n\r\nexport default idb => {\r\n    const open = (name) => {\r\n        const request = idb.open(name);\r\n        request.onupgradeneeded = () => {\r\n            request.result.createObjectStore('records', { keyPath: 'id', autoIncrement: true });\r\n        }\r\n        return promisify(request);\r\n    };\r\n    const put = x => db => promisify(db.transaction('records', 'readwrite')\r\n        .objectStore('records').put(x)).then(closeDb(db));\r\n\r\n    const addRecord = x => open('records')\r\n        .then(put(x));\r\n\r\n    const getRecords = () => open('records')\r\n        .then(db => promisify(\r\n            db.transaction('records').objectStore('records').getAll())\r\n            .then(closeDb(db)));\r\n\r\n    const deleteRecords = () => promisify(idb.deleteDatabase('records'));\r\n\r\n    return {\r\n        addRecord,\r\n        getRecords,\r\n        deleteRecords\r\n    }\r\n}","import React, { useState, useEffect } from \"react\";\nimport Question from \"./Question\";\nimport TimesTable from \"./TimesTable\";\nimport \"./App.css\";\nexport default (engine, db) => () => {\n  const [question, setQuestion] = useState([0, 0]);\n  const [records, setRecords] = useState([]);\n  const [filter, setFilter] = useState(NaN);\n  const [x, y] = question;\n  const onSubmit = ({ correct, secondsSpent }) => {\n    const ts = new Date().valueOf();\n    const record = {\n      correct,\n      x,\n      y,\n      secondsSpent,\n      ts\n    };\n    engine.speak(correct ? \"correct\" : `${x} times ${y} equals ${x * y}`);\n    db.addRecord(record)\n      .then(() => db.getRecords())\n      .then(latestRecords => {\n        setRecords(latestRecords);\n        setTimeout(\n          () => {\n            const [x, y] = engine.getQuestion(latestRecords, filter);\n            setQuestion([x, y, Math.random()]);\n          },\n          correct ? 500 : 500\n        );\n      });\n  };\n  const deleteRecords = () =>\n    db.deleteRecords().then(() => {\n      setRecords([]);\n      setQuestion(engine.getQuestion([], filter));\n    });\n\n  const onFilterChange = ({ filter }) => {\n    setFilter(filter);\n  };\n\n  useEffect(() => {\n    db.getRecords().then(records => {\n      setRecords(records);\n      const question = engine.getQuestion(records, filter);\n      setQuestion(question || [0, 0]);\n    });\n  }, [filter]);\n\n  return (\n    <>\n      <Question question={question} onSubmit={onSubmit} />\n      <TimesTable\n        onFilterChange={onFilterChange}\n        questionsWithScore={engine\n          .getAllQuestions()\n          .map(xs =>\n            xs.map(([x, y]) => [x, y, engine.getScore(x, y, records)])\n          )}\n      />\n\n      <button onClick={deleteRecords}>Delete records</button>\n    </>\n  );\n};\n","const from = 2;\r\nconst to = 9;\r\nconst range = (from, to) => [...Array(to - from + 1).keys()].map(n => from + n);\r\nconst getAllQuestions = () =>\r\n  range(from, to).map(x => range(from, x).map(y => [x, y]));\r\nconst avg = xs => xs.reduce((acc, x) => acc + x, 0) / xs.length;\r\nconst speak = text => {\r\n  const u = new SpeechSynthesisUtterance(text);\r\n  u.voice = speechSynthesis.getVoices()[0];\r\n  speechSynthesis.speak(u);\r\n};\r\nexport default random => {\r\n  const biasRandom = (min, max, bias, influence) => {\r\n    const rnd = random() * (max - min) + min;\r\n    const mix = random() * influence;\r\n    return rnd * (1 - mix) + bias * mix;\r\n  };\r\n  const getQuestion = (records, filter) => {\r\n    const allQuestions = getAllQuestions().flat();\r\n    const questions = isNaN(filter)\r\n      ? allQuestions\r\n      : allQuestions.filter(x => x[0] === filter || x[1] === filter);\r\n\r\n    const notMasteredQuestions = questions\r\n      .map(([x, y]) => [x, y, getScore(x, y, records)])\r\n      .filter(x => x[2] < 6);\r\n\r\n    if (notMasteredQuestions.length === 0) {\r\n      return questions[Math.floor(random() * questions.length)];\r\n    }\r\n    const unanswerQuestions = notMasteredQuestions.filter(x => x[2] === 0);\r\n    console.warn({ unanswerQuestions });\r\n    if (unanswerQuestions.length > 0) {\r\n      return unanswerQuestions[Math.floor(random() * unanswerQuestions.length)];\r\n    }\r\n    console.warn(notMasteredQuestions);\r\n    return notMasteredQuestions.sort((a, b) => a[2] - b[2])[\r\n      Math.floor(biasRandom(0, notMasteredQuestions.length, 0, 0.7))\r\n    ];\r\n  };\r\n  const getTimedScore = records => {\r\n    const avgSeconds = avg(records.map(x => x.secondsSpent));\r\n    if (avgSeconds > 20) return 3;\r\n    if (avgSeconds > 10) return 4;\r\n    if (avgSeconds > 5) return 5;\r\n    return 6;\r\n  };\r\n  const getScore = (x, y, all) => {\r\n    const top5 = all\r\n      .filter(r => r.x === x && r.y === y)\r\n      .sort((a, b) => b.id - a.id)\r\n      .slice(0, 5);\r\n    if (top5.length === 0) return 0;\r\n    if (top5.every(r => !r.correct)) return 1;\r\n    if (!top5.every(r => r.correct)) return 2;\r\n    if (top5.every(r => r.correct)) return getTimedScore(top5);\r\n  };\r\n  return {\r\n    range,\r\n    getAllQuestions,\r\n    getQuestion,\r\n    getScore,\r\n    speak\r\n  };\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport AppFactory from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Db from \"./db\";\nimport Engine from \"./engine\";\n\nconst db = Db(indexedDB);\nconst App = AppFactory(Engine(Math.random), db);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}