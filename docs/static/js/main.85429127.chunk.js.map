{"version":3,"sources":["Question.jsx","TimesTable.jsx","serviceWorker.js","db.js","App.jsx","engine.js","index.js"],"names":["question","x","y","rnd","onSubmit","useState","NaN","answer","setAnswer","inputValue","setInputValue","inputRef","useRef","Date","startTime","setStartTime","readonly","setReadonly","useEffect","current","focus","data-testid","id","e","preventDefault","submittedAnswer","Number","correct","secondsSpent","parseInt","maxLength","ref","type","pattern","onChange","target","value","readOnly","isNaN","style","visibility","onFilterChange","questionsWithScore","filter","setFilter","onFilterInputChange","updatedFilter","checked","name","map","triples","i","key","z","className","join","Boolean","window","location","hostname","match","engine","db","promisify","request","Promise","resolve","reject","onsuccess","event","result","onerror","closeDb","close","range","from","to","Array","keys","n","getAllQuestions","speak","text","u","SpeechSynthesisUtterance","voice","speechSynthesis","getVoices","idb","open","onupgradeneeded","createObjectStore","keyPath","autoIncrement","addRecord","then","transaction","objectStore","put","getRecords","getAll","deleteRecords","deleteDatabase","Db","indexedDB","App","random","now","getScore","records","lastTenDays","r","sort","a","b","ts","oneDay","answeredIn20sec","length","every","reduce","acc","weightOfRecency","scoreToPriority","score","getQuestion","allQuestions","flat","questions","notMasteredQuestions","console","warn","Math","floor","unanswerQuestions","min","max","bias","influence","mix","biasRandom","Engine","setQuestion","setRecords","Question","valueOf","record","latestRecords","setTimeout","TimesTable","xs","onClick","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6MAEe,cAA0C,IAAD,gBAAtCA,SAAsC,GAA3BC,EAA2B,KAAxBC,EAAwB,KAArBC,EAAqB,KAAfC,EAAe,EAAfA,SAAe,EAC1BC,mBAASC,KADiB,mBAC/CC,EAD+C,KACvCC,EADuC,OAElBH,mBAAS,IAFS,mBAE/CI,EAF+C,KAEnCC,EAFmC,KAGhDC,EAAWC,iBAAO,MAH8B,EAIpBP,mBAAS,IAAIQ,MAJO,mBAI/CC,EAJ+C,KAIpCC,EAJoC,OAKtBV,oBAAS,GALa,mBAK/CW,EAL+C,KAKrCC,EALqC,KA6BtD,OARAC,qBAAU,WACRV,EAAUF,KACVI,EAAc,IACdO,GAAY,GACZF,EAAa,IAAIF,MACjBF,EAASQ,QAAQC,UAChB,CAACnB,EAAGC,EAAGC,IAGR,0BAAMkB,cAAY,gBAAgBC,GAAG,WAAWlB,SAxB7B,SAAAmB,GAEnB,GADAA,EAAEC,iBACiB,KAAff,EAAJ,CACA,IAAMgB,EAAkBC,OAAOjB,GAC/BD,EAAUiB,GACVrB,EAAS,CACPuB,QAASF,IAAoBxB,EAAIC,EACjC0B,aAAcC,UAAU,IAAIhB,KAASC,GAAa,OAEpDG,GAAY,MAgBV,8BACGhB,EADH,OACOC,EADP,KAGA,2BACE4B,UAAU,IACVC,IAAKpB,EACLqB,KAAK,OACLC,QAAQ,YACRC,SAtBiB,SAAAX,GACrBb,EAAca,EAAEY,OAAOC,QAsBnBA,MAAO3B,EACP4B,SAAUrB,IAEXsB,MAAM/B,GAAU,KACf,0BAAMc,cAAY,UAAUpB,EAAIC,IAAMK,EAAS,eAAO,UAExD,uBACEgC,MAAO,CACLC,WAAYvC,EAAIC,IAAMK,GAAU+B,MAAM/B,GAAU,SAAW,YAF/D,qBAKqBN,EAAIC,K,OCnDhB,cAA6C,IAA1CuC,EAAyC,EAAzCA,eAAgBC,EAAyB,EAAzBA,mBAAyB,EAC7BrC,mBAASC,KADoB,mBAClDqC,EADkD,KAC1CC,EAD0C,KAEnDC,EAAsB,SAAAtB,GAC1B,IAAMuB,EAAgBjB,SAASN,EAAEY,OAAOC,OACxCQ,EAAUE,GACVL,EAAe,CAAEE,OAAQG,KAE3B,OACE,yBAAKxB,GAAG,WACN,6BACE,+BACE,2BACEU,KAAK,QACLe,QAAST,MAAMK,GACfK,KAAK,SACLd,SAAUW,EACVT,MAAM,KAER,uCAGHM,EAAmBO,KAAI,SAACC,EAASC,GAAV,OACtB,yBAAKC,IAAKD,GACR,+BACE,2BACEnB,KAAK,QACLe,QAASJ,IAAWO,EAAQ,GAAG,GAC/BF,KAAK,SACLd,SAAUW,EACVT,MAAOc,EAAQ,GAAG,KAEpB,8BAAOA,EAAQ,GAAG,GAAlB,UAEDA,EAAQD,KAAI,mCAAEhD,EAAF,KAAKC,EAAL,KAAQmD,EAAR,YACX,0BAAMC,UAAU,UAAUF,IAAKnD,EAAI,IAAMC,GACvC,0BACEkD,IAAKnD,EAAI,IAAMC,EACfoD,UAAW,CAAC,YAAD,OACGD,IADH,mBAELf,MAAMK,IAAW1C,IAAM0C,GAAUzC,IAAMyC,EACvC,GACA,CAAC,cACLY,KAAK,MAENtD,EAAI,OAAMC,a,MClCPsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBN,ICIgBC,EAAQC,EDJlBC,EAAY,SAAAC,GAAO,OAAI,IAAIC,SAAQ,SAACC,EAASC,GAC/CH,EAAQI,UAAY,SAAUC,GAC1BH,EAAQG,EAAMlC,OAAOmC,SAEzBN,EAAQO,QAAUJ,MAGhBK,EAAU,SAAAV,GAAE,OAAI,SAAAQ,GAElB,OADAR,EAAGW,QACIH,IENLI,EAAQ,SAACC,EAAMC,GAAP,OACZ,YAAIC,MAAMD,EAAKD,EAAO,GAAGG,QAAQ7B,KAAI,SAAC8B,GAAD,OAAOJ,EAAOI,MAC/CC,EAAkB,kBACtBN,EANW,EACF,GAKOzB,KAAI,SAAChD,GAAD,OAAOyE,EANhB,EAM4BzE,GAAGgD,KAAI,SAAC/C,GAAD,MAAO,CAACD,EAAGC,UAErD+E,EAAQ,SAACC,GACb,IAAMC,EAAI,IAAIC,yBAAyBF,GACvCC,EAAEE,MAAQC,gBAAgBC,YAAY,GACtCD,gBAAgBL,MAAME,ICHlBrB,EHIS,SAAA0B,GACX,IAAMC,EAAO,SAACzC,GACV,IAAMgB,EAAUwB,EAAIC,KAAKzC,GAIzB,OAHAgB,EAAQ0B,gBAAkB,WACtB1B,EAAQM,OAAOqB,kBAAkB,UAAW,CAAEC,QAAS,KAAMC,eAAe,KAEzE9B,EAAUC,IAerB,MAAO,CACH8B,UAXc,SAAA7F,GAAC,OAAIwF,EAAK,WACvBM,KAJO,SAAA9F,GAAC,OAAI,SAAA6D,GAAE,OAAIC,EAAUD,EAAGkC,YAAY,UAAW,aACtDC,YAAY,WAAWC,IAAIjG,IAAI8F,KAAKvB,EAAQV,KAGvCoC,CAAIjG,KAWVkG,WATe,kBAAMV,EAAK,WACzBM,MAAK,SAAAjC,GAAE,OAAIC,EACRD,EAAGkC,YAAY,WAAWC,YAAY,WAAWG,UAChDL,KAAKvB,EAAQV,QAOlBuC,cALkB,kBAAMtC,EAAUyB,EAAIc,eAAe,cGvBlDC,CAAGC,WACRC,GFLU5C,ECSD,SAAC6C,EAAQC,GACtB,IA4BMC,EAAW,SAAC3G,EAAGC,EAAG2G,GACtB,IAIMC,EAHaD,EAChBlE,QAAO,SAACoE,GAAD,OAAOA,EAAE9G,IAAMA,GAAK8G,EAAE7G,IAAMA,KACnC8G,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE5F,GAAK2F,EAAE3F,MACIqB,QAAO,SAACoE,GAAD,OAAOA,EAAEI,GAAKR,IAJpCS,SAKVC,EAAkB,SAACN,GAAD,OAAOA,EAAEpF,SAAWoF,EAAEnF,cAAgB,IAC9D,OAA2B,IAAvBkF,EAAYQ,OAAqBhH,IACjCwG,EAAYQ,QAAU,GAAKR,EAAYS,MAAMF,GACxC,IACLP,EAAYS,MAAMF,GAAyB,GACxCP,EAAYU,QAAO,SAACC,EAAKxH,GAC9B,IAAMyH,GAXQN,OAWsBT,IAAQ1G,EAAEkH,KAXhCC,MAYd,OACEK,GACCxH,EAAE0B,QAAW1B,EAAE2B,cAAgB,GAAK,GAAK,IAAO,IAAM8F,IAExD,IAECC,EAAkB,SAACC,GACvB,OAAItF,MAAMsF,GAAe,EACrBA,EAAQ,EAAU,EAClBA,EAAQ,GAAW,EACnBA,EAAQ,GAAW,EACnBA,EAAQ,GAAW,EACnBA,EAAQ,IAAY,EACjB,GAGT,MAAO,CACLlD,QACAM,kBACA6C,YAvDkB,SAAChB,EAASlE,GAC5B,IAAMmF,EAAe9C,IAAkB+C,OACjCC,EAAY1F,MAAMK,GACpBmF,EACAA,EAAanF,QAAO,SAAC1C,GAAD,OAAOA,EAAE,KAAO0C,GAAU1C,EAAE,KAAO0C,KAErDsF,EAAuBD,EAC1B/E,KAAI,mCAAEhD,EAAF,KAAKC,EAAL,WAAY,CAACD,EAAGC,EAAGyH,EAAgBf,EAAS3G,EAAGC,EAAG2G,QACtDlE,QAAO,SAAC1C,GAAD,OAAOA,EAAE,GAAK,KAExB,GAAoC,IAAhCgI,EAAqBX,OAEvB,OADAY,QAAQC,KAAK,CAAEF,yBACRD,EAAUI,KAAKC,MAAM3B,IAAWsB,EAAUV,SAEnD,IAAMgB,EAAoBL,EAAqBtF,QAAO,SAAC1C,GAAD,OAAgB,IAATA,EAAE,MAE/D,OADAiI,QAAQC,KAAK,CAAEG,oBAAmBL,yBAC9BK,EAAkBhB,OAAS,EACtBgB,EAAkBF,KAAKC,MAAM3B,IAAW4B,EAAkBhB,SAE5DW,EAAqBjB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE,GAAKC,EAAE,MAClDkB,KAAKC,MAzBU,SAACE,EAAKC,EAAKC,EAAMC,GAClC,IAAMvI,EAAMuG,KAAY8B,EAAMD,GAAOA,EAC/BI,EAAMjC,IAAWgC,EACvB,OAAOvI,GAAO,EAAIwI,GAAOF,EAAOE,EAsBnBC,CAAW,EAAGX,EAAqBX,OAAQ,EAAG,OAoC3DV,WACA3B,QACA0C,mBCnEFkB,CAAOT,KAAK1B,QAAQ,kBAAM,IAAI7F,QFNRiD,EEOtBA,EFP6B,WAAO,IAAD,EACHzD,mBAAS,CAAC,EAAG,IADV,mBAC5BL,EAD4B,KAClB8I,EADkB,OAELzI,mBAAS,IAFJ,mBAE5BwG,EAF4B,KAEnBkC,EAFmB,OAGP1I,mBAASC,KAHF,mBAG5BqC,EAH4B,KAGpBC,EAHoB,mBAIpB5C,EAJoB,GAI5BC,EAJ4B,KAIzBC,EAJyB,KA8CnC,OARAgB,qBAAU,WACR4C,EAAGqC,aAAaJ,MAAK,SAACc,GACpBkC,EAAWlC,GACX,IAAM7G,EAAW6D,EAAOgE,YAAYhB,EAASlE,GAC7CmG,EAAY9I,GAAY,CAAC,EAAG,SAE7B,CAAC2C,IAGF,oCACE,kBAACqG,EAAD,CAAUhJ,SAAUA,EAAUI,SA3CjB,SAAC,GAA+B,IAA7BuB,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aACrBuF,GAAK,IAAItG,MAAOoI,UAChBC,EAAS,CACbvH,UACA1B,IACAC,IACA0B,eACAuF,MAEFtD,EAAOoB,MAAMtD,EAAU,UAAH,UAAkB1B,EAAlB,kBAA6BC,EAA7B,mBAAyCD,EAAIC,IACjE4D,EAAGgC,UAAUoD,GACVnD,MAAK,kBAAMjC,EAAGqC,gBACdJ,MAAK,SAACoD,GACLJ,EAAWI,GACXC,YACE,WAAO,IAAD,EACWvF,EAAOgE,YAAYsB,EAAexG,GAD7C,mBACG1C,EADH,KACMC,EADN,KAEJ4I,EAAY,CAAC7I,EAAGC,EAAGkI,KAAK1B,aAEhB,WAyBd,kBAAC2C,EAAD,CACE5G,eAhBiB,SAAC,GAAgB,IAAdE,EAAa,EAAbA,OACxBC,EAAUD,IAgBND,mBAAoBmB,EACjBmB,kBACA/B,KAAI,SAACqG,GAAD,OACHA,EAAGrG,KAAI,mCAAEhD,EAAF,KAAKC,EAAL,WAAY,CACjBD,EACAC,EACA2D,EAAO8D,gBAAgB9D,EAAO+C,SAAS3G,EAAGC,EAAG2G,aAKrD,4BAAQ0C,QAlCU,kBACpBzF,EAAGuC,gBAAgBN,MAAK,WACtBgD,EAAW,IACXD,EAAYjF,EAAOgE,YAAY,GAAIlF,SA+BnC,qBEpDN6G,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SJqH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/D,MAAK,SAAAgE,GACjCA,EAAaC,iB","file":"static/js/main.85429127.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\n\nexport default ({ question: [x, y, rnd], onSubmit }) => {\n  const [answer, setAnswer] = useState(NaN);\n  const [inputValue, setInputValue] = useState(\"\");\n  const inputRef = useRef(null);\n  const [startTime, setStartTime] = useState(new Date());\n  const [readonly, setReadonly] = useState(false);\n  const onFormSubmit = e => {\n    e.preventDefault();\n    if (inputValue === \"\") return;\n    const submittedAnswer = Number(inputValue);\n    setAnswer(submittedAnswer);\n    onSubmit({\n      correct: submittedAnswer === x * y,\n      secondsSpent: parseInt((new Date() - startTime) / 1000)\n    });\n    setReadonly(true);\n  };\n  const onAnswerChange = e => {\n    setInputValue(e.target.value);\n  };\n\n  useEffect(() => {\n    setAnswer(NaN);\n    setInputValue(\"\");\n    setReadonly(false);\n    setStartTime(new Date());\n    inputRef.current.focus();\n  }, [x, y, rnd]);\n\n  return (\n    <form data-testid=\"question-form\" id=\"question\" onSubmit={onFormSubmit}>\n      <span>\n        {x}×{y}=\n      </span>\n      <input\n        maxLength=\"2\"\n        ref={inputRef}\n        type=\"text\"\n        pattern=\"^\\d\\d?$\"\n        onChange={onAnswerChange}\n        value={inputValue}\n        readOnly={readonly}\n      />\n      {isNaN(answer) ? null : (\n        <span data-testid=\"result\">{x * y === answer ? \"✔️\" : \"❌\"}</span>\n      )}\n      <p\n        style={{\n          visibility: x * y === answer || isNaN(answer) ? \"hidden\" : \"visible\"\n        }}\n      >\n        Correct answer is {x * y}\n      </p>\n    </form>\n  );\n};\n","import React, { useState } from \"react\";\n\nexport default ({ onFilterChange, questionsWithScore }) => {\n  const [filter, setFilter] = useState(NaN);\n  const onFilterInputChange = e => {\n    const updatedFilter = parseInt(e.target.value);\n    setFilter(updatedFilter);\n    onFilterChange({ filter: updatedFilter });\n  };\n  return (\n    <div id=\"records\">\n      <div>\n        <label>\n          <input\n            type=\"radio\"\n            checked={isNaN(filter)}\n            name=\"filter\"\n            onChange={onFilterInputChange}\n            value=\"\"\n          />\n          <span>all</span>\n        </label>\n      </div>\n      {questionsWithScore.map((triples, i) => (\n        <div key={i}>\n          <label>\n            <input\n              type=\"radio\"\n              checked={filter === triples[0][0]}\n              name=\"filter\"\n              onChange={onFilterInputChange}\n              value={triples[0][0]}\n            />\n            <span>{triples[0][0]}×?</span>\n          </label>\n          {triples.map(([x, y, z]) => (\n            <span className=\"wrapper\" key={x + \"-\" + y}>\n              <span\n                key={x + \"-\" + y}\n                className={[\n                  `priority-${z}`,\n                  ...(isNaN(filter) || x === filter || y === filter\n                    ? []\n                    : [\"disabled\"])\n                ].join(\" \")}\n              >\n                {x + \"×\" + y}\n              </span>\n            </span>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const promisify = request => new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n        resolve(event.target.result);\n    };\n    request.onerror = reject\n});\n\nconst closeDb = db => result => {\n    db.close();\n    return result;\n};\n\nexport default idb => {\n    const open = (name) => {\n        const request = idb.open(name);\n        request.onupgradeneeded = () => {\n            request.result.createObjectStore('records', { keyPath: 'id', autoIncrement: true });\n        }\n        return promisify(request);\n    };\n    const put = x => db => promisify(db.transaction('records', 'readwrite')\n        .objectStore('records').put(x)).then(closeDb(db));\n\n    const addRecord = x => open('records')\n        .then(put(x));\n\n    const getRecords = () => open('records')\n        .then(db => promisify(\n            db.transaction('records').objectStore('records').getAll())\n            .then(closeDb(db)));\n\n    const deleteRecords = () => promisify(idb.deleteDatabase('records'));\n\n    return {\n        addRecord,\n        getRecords,\n        deleteRecords\n    }\n}","import React, { useState, useEffect } from 'react';\nimport Question from './Question';\nimport TimesTable from './TimesTable';\nimport './App.css';\nexport default (engine, db) => () => {\n  const [question, setQuestion] = useState([0, 0]);\n  const [records, setRecords] = useState([]);\n  const [filter, setFilter] = useState(NaN);\n  const [x, y] = question;\n  const onSubmit = ({ correct, secondsSpent }) => {\n    const ts = new Date().valueOf();\n    const record = {\n      correct,\n      x,\n      y,\n      secondsSpent,\n      ts,\n    };\n    engine.speak(correct ? 'correct' : `${x} times ${y} equals ${x * y}`);\n    db.addRecord(record)\n      .then(() => db.getRecords())\n      .then((latestRecords) => {\n        setRecords(latestRecords);\n        setTimeout(\n          () => {\n            const [x, y] = engine.getQuestion(latestRecords, filter);\n            setQuestion([x, y, Math.random()]);\n          },\n          correct ? 500 : 500\n        );\n      });\n  };\n  const deleteRecords = () =>\n    db.deleteRecords().then(() => {\n      setRecords([]);\n      setQuestion(engine.getQuestion([], filter));\n    });\n\n  const onFilterChange = ({ filter }) => {\n    setFilter(filter);\n  };\n\n  useEffect(() => {\n    db.getRecords().then((records) => {\n      setRecords(records);\n      const question = engine.getQuestion(records, filter);\n      setQuestion(question || [0, 0]);\n    });\n  }, [filter]);\n\n  return (\n    <>\n      <Question question={question} onSubmit={onSubmit} />\n      <TimesTable\n        onFilterChange={onFilterChange}\n        questionsWithScore={engine\n          .getAllQuestions()\n          .map((xs) =>\n            xs.map(([x, y]) => [\n              x,\n              y,\n              engine.scoreToPriority(engine.getScore(x, y, records)),\n            ])\n          )}\n      />\n\n      <button onClick={deleteRecords}>Delete records</button>\n    </>\n  );\n};\n","const from = 2;\nconst to = 9;\nconst oneDay = 1000 * 3600 * 24;\nconst range = (from, to) =>\n  [...Array(to - from + 1).keys()].map((n) => from + n);\nconst getAllQuestions = () =>\n  range(from, to).map((x) => range(from, x).map((y) => [x, y]));\nconst avg = (xs) => xs.reduce((acc, x) => acc + x, 0) / xs.length;\nconst speak = (text) => {\n  const u = new SpeechSynthesisUtterance(text);\n  u.voice = speechSynthesis.getVoices()[0];\n  speechSynthesis.speak(u);\n};\nexport default (random, now) => {\n  const biasRandom = (min, max, bias, influence) => {\n    const rnd = random() * (max - min) + min;\n    const mix = random() * influence;\n    return rnd * (1 - mix) + bias * mix;\n  };\n  const getQuestion = (records, filter) => {\n    const allQuestions = getAllQuestions().flat();\n    const questions = isNaN(filter)\n      ? allQuestions\n      : allQuestions.filter((x) => x[0] === filter || x[1] === filter);\n\n    const notMasteredQuestions = questions\n      .map(([x, y]) => [x, y, scoreToPriority(getScore(x, y, records))])\n      .filter((x) => x[2] < 6);\n\n    if (notMasteredQuestions.length === 0) {\n      console.warn({ notMasteredQuestions });\n      return questions[Math.floor(random() * questions.length)];\n    }\n    const unanswerQuestions = notMasteredQuestions.filter((x) => x[2] === 0);\n    console.warn({ unanswerQuestions, notMasteredQuestions });\n    if (unanswerQuestions.length > 0) {\n      return unanswerQuestions[Math.floor(random() * unanswerQuestions.length)];\n    }\n    return notMasteredQuestions.sort((a, b) => a[2] - b[2])[\n      Math.floor(biasRandom(0, notMasteredQuestions.length, 0, 0.7))\n    ];\n  };\n  const getScore = (x, y, records) => {\n    const tenDays = oneDay * 10;\n    const allMatched = records\n      .filter((r) => r.x === x && r.y === y)\n      .sort((a, b) => b.id - a.id);\n    const lastTenDays = allMatched.filter((r) => r.ts > now() - tenDays);\n    const answeredIn20sec = (r) => r.correct && r.secondsSpent <= 20;\n    if (lastTenDays.length === 0) return NaN;\n    if (lastTenDays.length >= 5 && lastTenDays.every(answeredIn20sec))\n      return 100;\n    if (lastTenDays.every(answeredIn20sec)) return 75;\n    return lastTenDays.reduce((acc, x) => {\n      const weightOfRecency = (tenDays - (now() - x.ts)) / tenDays;\n      return (\n        acc +\n        (x.correct ? (x.secondsSpent <= 20 ? 20 : 10) : -50) * weightOfRecency\n      );\n    }, 0);\n  };\n  const scoreToPriority = (score) => {\n    if (isNaN(score)) return 0;\n    if (score < 0) return 1;\n    if (score < 25) return 2;\n    if (score < 50) return 3;\n    if (score < 75) return 4;\n    if (score < 100) return 5;\n    return 6;\n  };\n\n  return {\n    range,\n    getAllQuestions,\n    getQuestion,\n    getScore,\n    speak,\n    scoreToPriority,\n  };\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppFactory from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Db from './db';\nimport Engine from './engine';\n\nconst db = Db(indexedDB);\nconst App = AppFactory(\n  Engine(Math.random, () => new Date()),\n  db\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}